{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/Navigation/Navigation.js","containers/loader.js","containers/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchfeild","searchChange","className","type","placeholder","onChange","Card","name","email","id","lname","alt","src","CardList","robots","map","user","i","first_name","last_name","Scroll","props","style","overflowY","border","height","children","Navigation","onButtonSubmit","Button","variant","onClick","color","LoaderComp","width","timeout","App","setState","isButtonClicked","timer","setTimeout","fetch","then","response","json","users","data","clearTimeout","onSearchChange","event","target","value","state","filteredRobots","this","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61c5f379.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst SearchBox=({searchfeild, searchChange})=>{\r\n    return(\r\n            <div className='pa2'>\r\n                <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                 type=\"search\" \r\n                 placeholder='search by name' \r\n                 onChange={searchChange}/>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id, lname}) => {\r\n  //Displays all the information in a card format\r\n    return (\r\n      <div className='tc grow bg-light-blue br2 pa5 ma3 dib bw2 shadow-10'>\r\n        <img alt='robots' src={`https://reqres.in/img/faces/${id}-image.jpg`} />\r\n        <div>\r\n\t\t  <br />\r\n          <h2>{name} {lname}</h2>\r\n\t\t  <br />\r\n          <h3>{email}</h3>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nimport '../containers/styles.css';\r\n\r\n\r\nconst CardList = ({robots})=>{\r\n    return(\r\n            <div>\r\n                {\r\n                  //displays all the card by calling the card component and passing all the values\r\n                    robots.map((user, i) => {\r\n                        return(\r\n                                    <Card\r\n                                    key={i}\r\n                                    id={robots[i].id}\r\n                                    name={robots[i].first_name}\r\n                                    lname={robots[i].last_name}\r\n                                    email={robots[i].email}\r\n                                    />\r\n                            );\r\n                    })\r\n                }\r\n                <p className='copy' >Copyright &copy; Nirmalya Saha</p>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        //used to provide a scroll view\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '1200px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './Navbar.css';\r\n\r\nconst Navigation = ({onButtonSubmit}) => {\r\n\r\n            return(\r\n                //used to provide the button funtionality and displays the logo\r\n                <nav className='navbar'>\r\n                    <h3 className=\"logo\">Nirmalya Client</h3>\r\n                    <div className='nav-links'>\r\n                        <Button variant=\"contained\" onClick={onButtonSubmit} color=\"primary\">\r\n                            Get Users\r\n                        </Button>\r\n                    </div>\r\n                </nav>\r\n            );\r\n        }\r\n\r\n//{onRouteChange, isSignedIn}\r\nexport default Navigation;\r\n","import Loader from \"react-loader-spinner\";\r\nimport './styles.css';\r\n\r\nconst LoaderComp = ()=>{\r\n    return(\r\n        //used to display the loader when the api is fetching data\r\n        <div className='app'>\r\n            <Loader\r\n            type=\"TailSpin\"\r\n            color=\"rgb(155, 236, 34)\"\r\n            height={300}\r\n            width={300}\r\n            timeout={3000}\r\n            />\r\n       </div>\r\n    );\r\n}\r\nexport default LoaderComp\r\n","import React, {Component}  from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport Navbar from '../components/Navigation/Navigation';\r\nimport Loader from './loader';\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n        //defining the states\r\n        this.state={\r\n            robots: [],\r\n            searchfeild: '',\r\n            isButtonClicked: false\r\n        }\r\n    }\r\n\r\n    //function when the button is clicked .\r\n    //it fetches the api\r\n    //and stores in robots\r\n    onButtonSubmit = () => {\r\n        //changes the state of the button is clicked\r\n        this.setState({isButtonClicked: !this.isButtonClicked})\r\n        const timer = setTimeout(() => {\r\n            //fetches the api which is provided in letsgrowmore\r\n            fetch('https://reqres.in/api/users?page=1').then(response=> {\r\n            return response.json();\r\n            })\r\n            .then(users=>{\r\n                this.setState({robots: users.data})\r\n            });\r\n        }, 3000);\r\n        return () =>clearTimeout(timer);\r\n    }\r\n\r\n    //function used to change the searchfield\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfeild: event.target.value})\r\n    }\r\n\r\n    render(){\r\n\r\n        //used to filter the robots bt their first name\r\n        const filteredRobots = this.state.robots.filter(robots=>{\r\n            return robots.first_name.toLowerCase().includes(this.state.searchfeild.toLowerCase());\r\n        })\r\n\r\n        //at the starting\r\n        //when the user has not clicked the button\r\n        //and the api is not fetched\r\n        if(this.state.robots.length === 0 && this.state.isButtonClicked === false){\r\n            return (\r\n              <>\r\n                <Navbar onButtonSubmit={this.onButtonSubmit}/>\r\n                <h1 className='tc'>Please click on get users to get all details</h1>\r\n              </>\r\n            );\r\n\r\n        }\r\n\r\n        //when the button is clicked and the api is being called\r\n        //but no data is fetched\r\n        else if(this.state.robots.length === 0){\r\n            return (\r\n                <>\r\n                  <Navbar onButtonSubmit={this.onButtonSubmit}/>\r\n                  <h1 className='tc'>Loading...</h1>\r\n                  <Loader className='loader'></Loader>\r\n                </>\r\n              );\r\n        }\r\n\r\n        //when the button is clicked and the api has fetched data\r\n        else{\r\n            return(\r\n                <>\r\n                  <Navbar onButtonSubmit={this.onButtonSubmit}/>\r\n                  <div className='tc'>\r\n                      <h1>Client Info</h1>\r\n                      <SearchBox searchChange={this.onSearchChange}/>\r\n                      <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                      </Scroll>\r\n\r\n                  </div>\r\n                 </>\r\n              );\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <App/>\n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}